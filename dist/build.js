(()=>{const t="http://localhost:3000";Vue.component("goods-list",{props:["goods"],template:'\n        <div class="goods-list">\n            <goods-item v-for="goodEntity in goods" :goodProp="goodEntity"></goods-item>\n        </div>\n    '}),Vue.component("goods-item",{props:["goodProp"],methods:{async addToCart(){const o=await fetch(`${t}/addToCart`,{method:"POST",mode:"cors",headers:{"Content-Type":"application/json"},body:JSON.stringify(this.goodProp)});if(o.ok){const t=await o.json();this.$parent.$parent.cartGoods=t,this.$parent.$parent.getCartProducts()}else alert("Произошла ошибка при соединении с сервером!")}},template:'\n        <div class="goods-item">\n            <h3>{{goodProp.product_name}}</h3>\n            <p>{{goodProp.price}}</p>\n            <button class="add-to-cart-button" @click="addToCart">Добавить в корзину</button>\n        </div>\n    '}),Vue.component("goods-search",{props:["searchLine"],template:'\n        <input type="search" class="goods-search" v-bind:value="searchLine"\n        v-on:input="$emit(\'input\', $event.target.value)"/>\n    '}),Vue.component("cart-list",{props:["isVisibleCart","cartGoods"],template:'\n        <div class="cart-list" v-if="isVisibleCart">\n            <cart-item v-for="goodEntity in cartGoods" :goodProp="goodEntity"></cart-item>\n        </div>\n    '}),Vue.component("cart-item",{props:["goodProp"],methods:{async removeFromCart(){const o=await fetch(`${t}/removeFromCart`,{method:"POST",mode:"cors",headers:{"Content-Type":"application/json"},body:JSON.stringify(this.goodProp)});if(o.ok){const t=await o.json();this.$parent.$parent.cartGoods=t,this.$parent.$parent.getCartProducts()}else alert("Произошла ошибка при соединении с сервером!")}},template:'\n    <div class="cart-item">\n        <h3>{{goodProp.product_name}}</h3>\n        <p>{{goodProp.price}}</p>\n        <button class="remove-from-cart-button" @click="removeFromCart">Удалить из корзины</button>\n    </div>\n    '}),new Vue({el:"#app",data:{goods:[],filteredGoods:[],cartGoods:[],searchLine:"",isVisibleCart:!1},methods:{async getProducts(){const o=await fetch(`${t}/catalogData`);if(o.ok){const t=await o.json();this.goods=t,this.filteredGoods=t}else alert("Произошла ошибка при соединении с сервером!")},async getCartProducts(){const o=await fetch(`${t}/cartData`);if(o.ok){const t=await o.json();this.cartGoods=t}else alert("Произошла ошибка при соединении с сервером!")},filterGoods(){const t=new RegExp(this.searchLine,"gi");this.filteredGoods=this.goods.filter((o=>t.test(o.product_name)))},showOrHideCart(){!1===this.isVisibleCart?this.isVisibleCart=!0:this.isVisibleCart=!1}},async mounted(){await this.getProducts(),await this.getCartProducts()}})})();